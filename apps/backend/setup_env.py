#!/usr/bin/env python3
"""
Environment setup helper for Safe Wave backend.
This script helps users create a proper .env.local file with all required settings.
"""

import os
import secrets
from pathlib import Path


def create_env_file():
    """Create a .env.local file with proper configuration"""
    
    print("üöÄ Safe Wave Backend - Environment Setup")
    print("=" * 50)
    print()
    print("This script will help you create a .env.local file with all the")
    print("required configuration for the Safe Wave backend to work properly.")
    print()
    
    # Check if .env.local already exists
    env_file = Path(".env.local")
    if env_file.exists():
        response = input("‚ö†Ô∏è .env.local already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    print("üìù Let's configure your environment...")
    print()
    
    # Collect configuration
    config = {}
    
    # Database configuration
    print("üóÑÔ∏è Database Configuration:")
    config['POSTGRES_DB'] = input("Database name [safewave]: ").strip() or "safewave"
    config['POSTGRES_USER'] = input("Database user [user]: ").strip() or "user"
    config['POSTGRES_PASSWORD'] = input("Database password [password]: ").strip() or "password"
    config['POSTGRES_PORT'] = input("Database port [5433]: ").strip() or "5433"
    config['DATABASE_URL'] = f"postgresql://{config['POSTGRES_USER']}:{config['POSTGRES_PASSWORD']}@localhost:{config['POSTGRES_PORT']}/{config['POSTGRES_DB']}"
    print()
    
    # JWT Configuration
    print("üîê Security Configuration:")
    config['SECRET_KEY'] = secrets.token_urlsafe(32)
    print(f"‚úÖ Generated secure JWT secret key")
    config['ALGORITHM'] = "HS256"
    config['ACCESS_TOKEN_EXPIRE_MINUTES'] = "15"
    config['REFRESH_TOKEN_EXPIRE_DAYS'] = "7"
    print()
    
    # API Configuration
    print("üåê API Configuration:")
    config['API_V1_STR'] = "/api/v1"
    config['PROJECT_NAME'] = "Safe Wave API"
    config['API_PORT'] = "9000"
    print()
    
    # LLM Configuration
    print("üß† AI/LLM Configuration:")
    print("For the app to work properly, you need at least one LLM service.")
    print("OpenRouter is recommended (free tier available).")
    print()
    
    openrouter_key = input("OpenRouter API Key (recommended): ").strip()
    if openrouter_key:
        config['OPENROUTER_API_KEY'] = openrouter_key
        config['OPENROUTER_BASE_URL'] = "https://openrouter.ai/api/v1"
        config['OPENROUTER_MODEL'] = "meta-llama/llama-3.1-405b-instruct:free"
        print("‚úÖ OpenRouter configured")
    else:
        print("‚ö†Ô∏è No OpenRouter key provided")
    
    openai_key = input("OpenAI API Key (optional): ").strip()
    if openai_key:
        config['OPENAI_API_KEY'] = openai_key
        print("‚úÖ OpenAI configured")
    else:
        print("‚ö†Ô∏è No OpenAI key provided")
    
    config['USE_LOCAL_MODELS'] = "false"
    config['COST_OPTIMIZATION'] = "true"
    print()
    
    # Email Configuration
    print("üìß Email Configuration:")
    print("Email is required for sending alerts to care persons.")
    print("For Gmail, use your email and an app password (not your regular password).")
    print()
    
    config['SMTP_SERVER'] = input("SMTP Server [smtp.gmail.com]: ").strip() or "smtp.gmail.com"
    config['SMTP_PORT'] = input("SMTP Port [587]: ").strip() or "587"
    config['SMTP_USERNAME'] = input("SMTP Username (your email): ").strip()
    config['SMTP_PASSWORD'] = input("SMTP Password (app password for Gmail): ").strip()
    config['FROM_EMAIL'] = input("From Email [noreply@safewave.com]: ").strip() or "noreply@safewave.com"
    print()
    
    # File Upload Configuration
    print("üìÅ File Upload Configuration:")
    config['UPLOAD_BASE_DIR'] = "uploads"
    config['AUDIO_UPLOAD_DIR'] = "uploads/audio"
    config['DOCUMENT_UPLOAD_DIR'] = "uploads/documents"
    config['MAX_FILE_SIZE'] = "104857600"  # 100MB
    config['ALLOWED_AUDIO_FORMATS'] = '["mp3","wav","m4a","aac","ogg","flac","webm"]'
    config['ALLOWED_DOCUMENT_FORMATS'] = '["pdf","doc","docx","txt","rtf"]'
    print()
    
    # Audio Processing Configuration
    print("üéµ Audio Processing Configuration:")
    config['AUDIO_CHUNK_SIZE'] = "8192"
    config['ENABLE_AUDIO_STREAMING'] = "true"
    config['ENABLE_TRANSCRIPTION'] = "true"
    config['ENABLE_LLM_ANALYSIS'] = "true"
    print()
    
    # Write the .env.local file
    print("üíæ Writing configuration to .env.local...")
    
    with open(".env.local", "w") as f:
        f.write("# Safe Wave Backend Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        
        f.write("# Database Configuration\n")
        f.write(f"POSTGRES_DB={config['POSTGRES_DB']}\n")
        f.write(f"POSTGRES_USER={config['POSTGRES_USER']}\n")
        f.write(f"POSTGRES_PASSWORD={config['POSTGRES_PASSWORD']}\n")
        f.write(f"POSTGRES_PORT={config['POSTGRES_PORT']}\n")
        f.write(f"DATABASE_URL={config['DATABASE_URL']}\n\n")
        
        f.write("# JWT Configuration\n")
        f.write(f"SECRET_KEY={config['SECRET_KEY']}\n")
        f.write(f"ALGORITHM={config['ALGORITHM']}\n")
        f.write(f"ACCESS_TOKEN_EXPIRE_MINUTES={config['ACCESS_TOKEN_EXPIRE_MINUTES']}\n")
        f.write(f"REFRESH_TOKEN_EXPIRE_DAYS={config['REFRESH_TOKEN_EXPIRE_DAYS']}\n\n")
        
        f.write("# API Configuration\n")
        f.write(f"API_V1_STR={config['API_V1_STR']}\n")
        f.write(f"PROJECT_NAME={config['PROJECT_NAME']}\n")
        f.write(f"API_PORT={config['API_PORT']}\n\n")
        
        if 'OPENAI_API_KEY' in config:
            f.write("# OpenAI Configuration\n")
            f.write(f"OPENAI_API_KEY={config['OPENAI_API_KEY']}\n")
        
        f.write(f"USE_LOCAL_MODELS={config['USE_LOCAL_MODELS']}\n")
        f.write(f"COST_OPTIMIZATION={config['COST_OPTIMIZATION']}\n\n")
        
        if 'OPENROUTER_API_KEY' in config:
            f.write("# OpenRouter Configuration (Free LLM Fallback)\n")
            f.write(f"OPENROUTER_API_KEY={config['OPENROUTER_API_KEY']}\n")
            f.write(f"OPENROUTER_BASE_URL={config['OPENROUTER_BASE_URL']}\n")
            f.write(f"OPENROUTER_MODEL={config['OPENROUTER_MODEL']}\n\n")
        
        f.write("# SMTP Email Configuration\n")
        f.write(f"SMTP_SERVER={config['SMTP_SERVER']}\n")
        f.write(f"SMTP_PORT={config['SMTP_PORT']}\n")
        f.write(f"SMTP_USERNAME={config['SMTP_USERNAME']}\n")
        f.write(f"SMTP_PASSWORD={config['SMTP_PASSWORD']}\n")
        f.write(f"FROM_EMAIL={config['FROM_EMAIL']}\n\n")
        
        f.write("# File Upload Configuration\n")
        f.write(f"UPLOAD_BASE_DIR={config['UPLOAD_BASE_DIR']}\n")
        f.write(f"AUDIO_UPLOAD_DIR={config['AUDIO_UPLOAD_DIR']}\n")
        f.write(f"DOCUMENT_UPLOAD_DIR={config['DOCUMENT_UPLOAD_DIR']}\n")
        f.write(f"MAX_FILE_SIZE={config['MAX_FILE_SIZE']}\n")
        f.write(f"ALLOWED_AUDIO_FORMATS={config['ALLOWED_AUDIO_FORMATS']}\n")
        f.write(f"ALLOWED_DOCUMENT_FORMATS={config['ALLOWED_DOCUMENT_FORMATS']}\n\n")
        
        f.write("# Audio Processing Configuration\n")
        f.write(f"AUDIO_CHUNK_SIZE={config['AUDIO_CHUNK_SIZE']}\n")
        f.write(f"ENABLE_AUDIO_STREAMING={config['ENABLE_AUDIO_STREAMING']}\n")
        f.write(f"ENABLE_TRANSCRIPTION={config['ENABLE_TRANSCRIPTION']}\n")
        f.write(f"ENABLE_LLM_ANALYSIS={config['ENABLE_LLM_ANALYSIS']}\n")
    
    print("‚úÖ Configuration saved to .env.local")
    print()
    print("üéâ Setup complete!")
    print()
    print("Next steps:")
    print("1. Start your PostgreSQL database")
    print("2. Run: python -m pip install -r requirements.txt")
    print("3. Run: alembic upgrade head")
    print("4. Run: python main.py")
    print()
    print("To check if everything is configured correctly:")
    print("Visit: http://localhost:9000/health/config")


if __name__ == "__main__":
    create_env_file()
