#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');

/**
 * Get the local network IP address
 * @returns {string} The local IP address
 */
function getLocalIP() {
  const interfaces = os.networkInterfaces();

  // Priority order for interface types
  const interfacePriority = ['en0', 'eth0', 'wlan0', 'Wi-Fi', 'Ethernet'];

  // First, try to find IP from priority interfaces
  for (const interfaceName of interfacePriority) {
    if (interfaces[interfaceName]) {
      for (const iface of interfaces[interfaceName]) {
        if (iface.family === 'IPv4' && !iface.internal) {
          return iface.address;
        }
      }
    }
  }

  // Fallback: find any non-internal IPv4 address
  for (const interfaceName of Object.keys(interfaces)) {
    for (const iface of interfaces[interfaceName]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }

  // Final fallback
  return '127.0.0.1';
}

/**
 * Update frontend configuration with new IP
 * @param {string} ip - The IP address to use
 * @param {number} port - The port number to use
 */
function updateFrontendConfig(ip, port = 9000) {
  const configPath = path.join(__dirname, '../apps/frontend/services/config.ts');

  try {
    let configContent = fs.readFileSync(configPath, 'utf8');

    // Update the API_BASE_URL
    const newApiUrl = `http://${ip}:${port}`;

    // Replace existing API_BASE_URL
    configContent = configContent.replace(
      /export const API_BASE_URL = ['"`][^'"`]*['"`]/,
      `export const API_BASE_URL = '${newApiUrl}'`
    );

    // If no API_BASE_URL found, add it
    if (!configContent.includes('API_BASE_URL')) {
      configContent = `export const API_BASE_URL = '${newApiUrl}';\n\n${configContent}`;
    }

    fs.writeFileSync(configPath, configContent);
    console.log(`‚úÖ Frontend config updated: ${newApiUrl}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Could not update frontend config: ${error.message}`);
  }
}

/**
 * Update backend configuration with new IP
 * @param {string} ip - The IP address to use
 * @param {number} port - The port number to use
 */
function updateBackendConfig(ip, port = 9000) {
  const configPath = path.join(__dirname, '../apps/backend/app/core/config.py');

  try {
    let configContent = fs.readFileSync(configPath, 'utf8');

    // Update the host setting
    configContent = configContent.replace(
      /HOST:\s*str\s*=\s*['"`][^'"`]*['"`]/,
      `HOST: str = "${ip}"`
    );

    // Update the port setting
    configContent = configContent.replace(/PORT:\s*int\s*=\s*\d+/, `PORT: int = ${port}`);

    // If no HOST found, look for a settings class and add it
    if (!configContent.includes('HOST:') && configContent.includes('class Settings')) {
      configContent = configContent.replace(
        /(class Settings[^{]*{[^}]*)/,
        `$1\n    HOST: str = "${ip}"`
      );
    }

    fs.writeFileSync(configPath, configContent);
    console.log(`‚úÖ Backend config updated: ${ip}:${port}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Could not update backend config: ${error.message}`);
  }
}

/**
 * Create or update backend startup script
 * @param {string} ip - The IP address to use
 * @param {number} port - The port number to use
 */
function createBackendStartScript(ip, port = 9000) {
  const scriptPath = path.join(__dirname, '../apps/backend/start-network.py');

  const scriptContent = `#!/usr/bin/env python3
"""
Network-accessible backend startup script
Auto-generated by get-local-ip.js
"""

import uvicorn
from app.main import app

if __name__ == "__main__":
    print("üöÄ Starting Safe Wave Backend on network...")
    print(f"üì± Local Network URL: http://${ip}:${port}")
    print(f"üìö API Documentation: http://${ip}:${port}/docs")
    print(f"üè• Health Check: http://${ip}:${port}/health")
    print(f"üìä API Info: http://${ip}:${port}/info")
    print("")
    print("üîó Use this URL in your mobile app to connect from other devices")
    print("üì± Make sure your mobile device is on the same WiFi network")
    print("")

    uvicorn.run(
        "app.main:app",
        host="${ip}",
        port=${port},
        reload=True,
        log_level="info"
    )
`;

  fs.writeFileSync(scriptPath, scriptContent);

  // Make script executable on Unix systems
  try {
    fs.chmodSync(scriptPath, '755');
  } catch (error) {
    // Ignore chmod errors on Windows
  }

  console.log(`‚úÖ Backend network script created: ${scriptPath}`);
}

/**
 * Main function
 */
function main() {
  const args = process.argv.slice(2);
  const showHelp = args.includes('--help') || args.includes('-h');

  if (showHelp) {
    console.log(`
üåê Safe Wave Local Network IP Configuration

Usage: node scripts/get-local-ip.js [options]

Options:
  --help, -h     Show this help message
  --ip-only      Only output the IP address
  --update       Update configuration files with detected IP
  --backend      Update only backend configuration
  --frontend     Update only frontend configuration

Examples:
  node scripts/get-local-ip.js                    # Show current IP
  node scripts/get-local-ip.js --update           # Update all configs
  node scripts/get-local-ip.js --ip-only          # Just show IP
  node scripts/get-local-ip.js --backend          # Update backend only
`);
    return;
  }

  const localIP = getLocalIP();
  const port = 9000; // Default backend port

  if (args.includes('--ip-only')) {
    console.log(localIP);
    return;
  }

  console.log(`üåê Local Network IP: ${localIP}`);
  console.log(`üì± Backend will be accessible at: http://${localIP}:${port}`);
  console.log(`üìö API docs will be at: http://${localIP}:${port}/docs`);
  console.log(`üè• Health check will be at: http://${localIP}:${port}/health`);

  if (args.includes('--update') || args.includes('--backend') || args.includes('--frontend')) {
    console.log('\nüîß Updating configuration files...\n');

    if (args.includes('--update') || args.includes('--backend')) {
      updateBackendConfig(localIP, port);
      createBackendStartScript(localIP, port);
    }

    if (args.includes('--update') || args.includes('--frontend')) {
      updateFrontendConfig(localIP, port);
    }

    console.log('\n‚ú® Configuration update complete!');
    console.log('\nüìã Next steps:');
    console.log('   1. Start backend: npm run backend:network');
    console.log('   2. Start frontend: npm run frontend:dev');
    console.log('   3. Connect from mobile device using the IP above');
    console.log('   4. Make sure your mobile device is on the same WiFi network');
  } else {
    console.log('\nüí° To update configurations, run:');
    console.log('   npm run network:setup');
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  getLocalIP,
  updateFrontendConfig,
  updateBackendConfig,
  createBackendStartScript,
};
