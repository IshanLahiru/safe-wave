[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "safe-wave-backend"
version = "1.0.0"
description = "Safe Wave Python FastAPI backend for mental health application with AI-powered audio analysis and document management"
authors = ["Safe Wave Team <team@safewave.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.9"
# Core FastAPI dependencies
fastapi = "0.104.1"
uvicorn = {extras = ["standard"], version = "0.24.0"}
pydantic = "2.5.0"
pydantic-settings = "2.1.0"
python-multipart = "0.0.6"
python-dotenv = "1.0.0"
email-validator = "2.1.1"

# Database dependencies
sqlalchemy = "2.0.23"
psycopg2-binary = "2.9.9"
alembic = "1.12.1"

# Authentication dependencies
python-jose = {extras = ["cryptography"], version = "3.3.0"}
passlib = {extras = ["bcrypt"], version = "1.7.4"}

# File processing dependencies
aiofiles = "23.2.1"
requests = "^2.31.0"

# Audio processing and AI analysis
openai = "^1.58.1"
vosk = "0.3.44"
soundfile = "^0.13.1"
ffmpeg-python = "^0.2.0"

# LLM and analysis
langchain = "0.0.350"
langchain-openai = "0.0.2"

# Caching
redis = "5.0.1"

# Container management
docker = "7.0.0"
psycopg = "^3.2.9"

[tool.poetry.group.dev.dependencies]
# Code formatting and linting
black = "23.12.1"
isort = "5.13.2"
flake8 = "7.0.0"
mypy = "1.8.0"

[tool.poetry.group.test.dependencies]
# Testing dependencies (to be added when tests are implemented)
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
httpx = "^0.24.0"

[tool.poetry.group.docs.dependencies]
# Documentation dependencies (optional)
mkdocs = {version = "^1.5.0", optional = true}
mkdocs-material = {version = "^9.0.0", optional = true}

[tool.poetry.extras]
docs = ["mkdocs", "mkdocs-material"]

[tool.poetry.scripts]
# Cross-Platform Setup Automation Scripts
setup = "scripts.setup:main"
setup-env = "scripts.setup_env:main"

# Port Management Scripts
kill-port = "scripts.kill_port:main"

# Database management scripts
db-manage = "scripts.manage:main"

# Seeding scripts
seed-content = "scripts.seed_content:main"
seed-data = "scripts.seed_data:main"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | alembic/versions
)/
'''
skip-string-normalization = false

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "alembic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203", # whitespace before ':'
    "E501", # line too long (handled by black)  
    "W503", # line break before binary operator
    "W504", # line break after binary operator
    "F401", # imported but unused (handled per-file)
    "E712", # comparison to True/False
    "W293", # blank line contains whitespace
    "E402", # module level import not at top
    "F811", # redefined name
    "F541", # f-string is missing placeholders
    "E722", # bare except
    "W291", # trailing whitespace
    "W292", # no newline at end of file
]
exclude = [
    ".git",
    "__pycache__",
    "build", 
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    "alembic/versions",
    "scripts/",
    "test_*.py",
    "migrations/",
    "check_*.py",
]
per-file-ignores = [
    "__init__.py:F401", # imported but unused
]

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
ignore_missing_imports = true
show_error_codes = true
disable_error_code = [
    "assignment",
    "arg-type", 
    "attr-defined",
    "var-annotated",
    "return-value",
    "no-redef",
    "used-before-def",
    "index",
    "operator",
    "union-attr",
    "type-var",
    "annotation-unchecked",
    "import-untyped"
]
exclude = [
    "alembic/",
    "__pycache__/",
    ".venv/",
    "venv/",
    "scripts/.*"
]

[[tool.mypy.overrides]]
module = "scripts.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--verbose"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*", 
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/scripts/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
